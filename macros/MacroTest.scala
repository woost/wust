package macros

import scala.reflect.macros.Context
import scala.language.experimental.macros
import scala.annotation.StaticAnnotation
import scala.reflect.api._

object GraphSchemaMacro {
  def impl(c: Context)(annottees: c.Expr[Any]*): c.Expr[Any] = {
    import c.universe._
    import Flag._

    val result = {
      annottees.map(_.tree).toList match {
        case q"""
object $name extends ..$parents {
    val nodes = List(..$nodes)
    ..$body
}
""" :: Nil =>
          val factories = nodes.map{ 
            case pq"""(${name:String},${label:String})""" =>
              q"""
  object ${TermName(name)} extends ContentNodeFactory[${TypeName(name)}] {
    def create(node: Node) = new ${TypeName(name)}(node)
    val label = Label($label)
  }
"""
 }
          q"""
object $name extends ..$parents {
    def hello: ${typeOf[String]} = "\n\n\nHello! I'm generated by a macro.\n\n\n"

    ..$factories

    ..$body
}
"""
      }
    }
    c.Expr[Any](result)
  }
}
class GraphSchema extends StaticAnnotation {
  def macroTransform(annottees: Any*) = macro GraphSchemaMacro.impl
}
